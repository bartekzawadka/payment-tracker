name: 'Build'

jobs:
    - job: Build
      displayName: 'Build'
      variables:
        BuildConfiguration: Release
        appVersion: '1.0.0'
        isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
      workspace: 
        clean: all
      pool:
        name: Azure Pipelines
        vmImage: ubuntu-20.04
      steps:
      - script: |
          PACKAGE_PATH="$(Build.SourcesDirectory)/src/app/payment-tracker/package.json"
          PACKAGE_VERSION=$(grep version $PACKAGE_PATH | sed 's/.*"version": "\(.*\)".*/\1/')
          echo "Setting app version: $PACKAGE_VERSION"
          echo "##vso[task.setvariable variable=appVersion]$PACKAGE_VERSION"
        displayName: Get app version
      - task: qetza.replacetokens.replacetokens-task.replacetokens@3
        displayName: 'Replace tokens in **/environment.prod.ts'
        inputs:
            rootDirectory: src
            targetFiles: '**/environment.prod.ts'
            writeBOM: false
            tokenPrefix: '##{'
            tokenSuffix: '}##'

      - task: UseDotNet@2
        displayName: 'Uset .NET 5.0.100'
        inputs:
          packageType: 'sdk'
          version: '5.0.100'
          includePreviewVersions: true
      - task: NuGetAuthenticate@0
        displayName: 'NuGet Authenticate'

      - script: './build.sh --target compile --configuration $(BuildConfiguration) --host AzurePipelines'
        displayName: 'Run NUKE build'

      # - script: './build.sh --target test --configuration $(BuildConfiguration) --host AzurePipelines'
      #   displayName: 'Run NUKE unit tests'

      # - task: Bash@3
      #   displayName: 'Run integration tests'
      #   inputs:
      #     targetType: filePath
      #     filePath: ./src/api/Payment.Tracker/Tests/Docker/run.sh

      # - task: PublishTestResults@2
      #   displayName: 'Publish tests results'
      #   inputs:
      #     testResultsFormat: VSTest
      #     testResultsFiles: '**/*.trx'
      #     failTaskOnFailedTests: true
      #     testRunTitle: 'Unit and integration Tests'

      - script: |
          echo "ls $(Build.SourcesDirectory)/src/api/Payment.Tracker"
          ls $(Build.SourcesDirectory)/src/api/Payment.Tracker
          echo "ls $(Build.SourcesDirectory)/src/api/Payment.Tracker/Payment.Tracker.Synchronization/"
          ls $(Build.SourcesDirectory)/src/api/Payment.Tracker/Payment.Tracker.Synchronization/
          echo "ls $(Build.SourcesDirectory)/src/api/Payment.Tracker/Payment.Tracker.Synchronization/bin"
          ls $(Build.SourcesDirectory)/src/api/Payment.Tracker/Payment.Tracker.Synchronization/bin
          echo "ls $(Build.SourcesDirectory)/src/api/Payment.Tracker/Payment.Tracker.Synchronization/bin/Release"
          ls $(Build.SourcesDirectory)/src/api/Payment.Tracker/Payment.Tracker.Synchronization/bin/Release
          echo "Artifacts staging directory"
          ls $(Build.ArtifactStagingDirectory)
      - task: DotNetCoreCLI@2
        displayName: 'Pack synchronization component'
        inputs:
          command: 'pack'
          verbosityPack: 'Diagnostic'
          packagesToPack: '**/Payment.Tracker.Synchronization.csproj;!**/*Tests.csproj'
          arguments: '--configuration $(BuildConfiguration) --no-restore --no-build'

      - task: NuGetCommand@2
        displayName: 'NuGet push'
        inputs:
          command: push
          publishVstsFeed: 'Baz'
          allowPackageConflicts: true

      - task: Docker@2
        displayName: Build API image
        inputs:
          repository: $(apiImageName)
          command: build
          buildContext: $(Build.SourcesDirectory)/src/api/Payment.Tracker/Payment.Tracker.Api/bin/$(BuildConfiguration)/net5.0
          Dockerfile: $(Build.SourcesDirectory)/src/api/Payment.Tracker/Payment.Tracker.Api/Dockerfile
          tags: |
            $(appVersion)
            latest
        condition: and(succeeded(), eq(variables.isMain, true))  

      - task: Docker@2
        displayName: Build APP image
        inputs:
          repository: $(appImageName)
          command: build
          buildContext: $(Build.SourcesDirectory)/src/app/payment-tracker
          Dockerfile: $(Build.SourcesDirectory)/src/app/payment-tracker/Dockerfile
          tags: |
            $(appVersion)
            latest
        condition: and(succeeded(), eq(variables.isMain, true))  

      - task: Docker@2
        displayName: Build Notifier image
        inputs:
          repository: $(notifierImageName)
          command: build
          buildContext: $(Build.SourcesDirectory)/src/api/Payment.Tracker/Payment.Tracker.Notifier/bin/$(BuildConfiguration)/net5.0
          Dockerfile: $(Build.SourcesDirectory)/src/api/Payment.Tracker/Payment.Tracker.Notifier/Dockerfile
          tags: |
            $(appVersion)
            latest
        condition: and(succeeded(), eq(variables.isMain, true))  

      - task: Docker@2
        displayName: Publish API image
        inputs:
          containerRegistry: 'dockerhub'
          repository: $(apiImageName)
          command: push
          tags: |
            $(appVersion)
            latest
        condition: and(succeeded(), eq(variables.isMain, true))  

      - task: Docker@2
        displayName: Publish APP image
        inputs:
          containerRegistry: 'dockerhub'
          repository: $(appImageName)
          command: push
          tags: |
            $(appVersion)
            latest
        condition: and(succeeded(), eq(variables.isMain, true))  
            
      - task: Docker@2
        displayName: Publish Notifier image
        inputs:
          containerRegistry: 'dockerhub'
          repository: $(notifierImageName)
          command: push
          tags: |
            $(appVersion)
            latest
        condition: and(succeeded(), eq(variables.isMain, true))  
